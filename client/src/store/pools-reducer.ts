import {TPoll, TQuestion} from "../interfaces/Polls.types";


const initialState = {
  polls:[
    // {
    //   id: 1,
    //   emp_name: "Туроков Михаил Петрович",
    //   emp_position: "Вапоразер",
    //   isPassed: false
    // },
    // {
    //   id: 2,
    //   emp_name: "Силиков Петр Михайлович",
    //   emp_position: "Вапоразер",
    //   isPassed: false
    // },
    // {
    //   id: 3,
    //   emp_name: "Туземцев Сергей Викторович",
    //   emp_position: "Вапоразер",
    //   isPassed: false
    // },
    // {
    //   id: 4,
    //   emp_name: "Мемлюков Анатолий Картович",
    //   emp_position: "Вапоразер",
    //   isPassed: false
    // }
  ],
  questions: [
    // {
    //   id: 1,
    //   question: 'Способен в случае необходимости принимать и отстаивать непопулярные решения'
    // },
    // {
    //   id: 2,
    //   question: 'Понимает, что эффективность работы подчиненных зависит от их руководителя и в случае сбоя стремится тут же исрпавить ситуацию и предотвраить ееё в будущем'
    // },
    // {
    //   id: 3,
    //   question: 'При обосновании инициативы рассматривает как плюсы, так и минусы решения, правильно рассчитывает ресурсы для улучшения ситуации'
    // },
    // {
    //   id: 4,
    //   question: 'Повышает квалификацию только тогда, когда это предлагает или рукводство, или отдел развития персонала'
    // },
    // {
    //   id: 5,
    //   question: 'При возникновении проблем стремится их решить самостоятельно, находит несколько вариантов рещения, умеет обосновать плюсы и минусы каждого из них'
    // },
    // {
    //   id: 6,
    //   question: 'В случае длительного стресса умеет находить разрядку и поддерживать хорошую форму'
    // },
    // {
    //   id: 7,
    //   question: 'Если возникает проблема, то в первую очередб подробно анализирует причину её возникновения и выявляет отвественных за её возниквновение'
    // },
    // {
    //   id: 8,
    //   question: 'Настаивает на своей позиции, если мнение собеседника изначально показалось неправильным, то старается сократить беседу'
    // },
    // {
    //   id: 9,
    //   question: 'Коллени и подчиненные часто обращаются к нему за советом и помощью, при общении с ним чувствуют себя психологически комфортно'
    // },
    // {
    //   id: 10,
    //   question: 'В сложных коммуникативных ситуациях лего раздражается, может быть резким в общении'
    // },
    // {
    //   id: 11,
    //   question: 'Стремится к получению максимально полной информации о рынке, смежных сферах и эффективно использует эту информацию'
    // },
    // {
    //   id: 12,
    //   question: 'Умеет эффективно действовать в условиях неопределенности'
    // },
    // {
    //   id: 13,
    //   question: 'Умеет признавать свои ошибки и брать на себя ответственность за них'
    // },
    // {
    //   id: 14,
    //   question: 'Старается найти общие интересы и общий язык с коллегами в случае решения совместных задач'
    // },
    // {
    //   id: 15,
    //   question: 'Признает свою отвественность за результат'
    // },
    // {
    //   id: 16,
    //   question: 'Не приветсвуте изменения, предпочитает проверенные, потвержденные длительным опытом решения'
    // },
    // {
    //   id: 17,
    //   question: 'В стрессе не теряется, ищет и находит решения'
    // },
    // {
    //   id: 18,
    //   question: 'Проактивне, заранее подстраивает работу своего подразделения под изменяющиеся стратегии компании'
    // },
    // {
    //   id: 19,
    //   question: 'Видит взаимосвязь и взаимозависимость различных подразделений и функций в организации, понимает инетерсы организации в целом'
    // },
    // {
    //   id: 20,
    //   question: 'Умеет хорошо концетрироваться на задаче, внимателен к мелочам'
    // },
    // {
    //   id: 21,
    //   question: 'Проявляет инициативу тогда, когда процесс требует улучшения'
    // }
  ]
}

type TState = typeof initialState;
type PollsActionType = ReturnType<typeof setPollsAC> | ReturnType<typeof removePollAC> |
  ReturnType<typeof setQuestionsAC>;

const poolsReducer = (state: TState = initialState, action: PollsActionType) => {
  switch (action.type) {
    case "SET-POLLS": {
      return {...state, polls: action.polls};
    }
    case "REMOVE-POLL": {
      return {...state, polls: state.polls.filter((poll) => {
        return !(poll.id === action.pollID)
      })};
    }
    case "SET-QUESTIONS": {
      return {...state, questions: action.questions}
    }
    default: return state
  }
}

export default poolsReducer;


export const setPollsAC = (polls: any) => ({type: "SET-POLLS", polls} as const);
export const removePollAC = (pollID: number) => ({type: "REMOVE-POLL", pollID} as const);
export const setQuestionsAC = (questions: Array<TQuestion>) => ({type: "SET-QUESTIONS", questions} as const);